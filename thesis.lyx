#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\backgroundcolor #ffffff
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title

\family typewriter
\size huge
A Schedulability Compatible Multiprocessor Resource Sharing Protocol
\end_layout

\begin_layout Standard
\align center

\size largest
Msc Computing Dissertation
\end_layout

\begin_layout Standard
\align center

\size largest
Y0017846
\end_layout

\begin_layout Standard
\align center

\shape smallcaps
\size largest
University of York
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace*{
\backslash
fill}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Abstract
Multiprocessor real-time resource control algorithms are currently an active
 research topic as more and more real-time systems become multicore.
 A common approach is based on mutual exclusion locks with some form of
 busy-waiting when the lock cannot be acquired.
 The Real-Time System Group at York have recently proposed a new resource
 sharing algorithm that can avoids deadlocks when nested locks are used.
 This report provides an implementation in a Linux Real-Time kernel.
 
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard

\size larger
Ideas
\end_layout

\begin_layout Standard
Difference between scheduling and resource sharing
\end_layout

\begin_layout Standard
Chart illustrating the protocol (state machine diagram)
\end_layout

\begin_layout Standard
Implement prototype in C as a working stand alone state machine (without
 kernel complexities)
\end_layout

\begin_layout Standard
Importance of metrics
\end_layout

\begin_layout Standard
Implement protocol with kernel
\end_layout

\begin_layout Standard

\series bold
Investigate : How does Linux do SMP real-time scheduling ?
\end_layout

\begin_layout Standard

\series bold
Investigate : How to allow threads to have a priority per processor ?
\end_layout

\begin_layout Standard
How do we assess/certify the priority of threads ?
\end_layout

\begin_layout Standard
How can the Linux Kernel be modified to allow a priority per processor ?
 
\end_layout

\begin_layout Enumerate
Modify task_struct in sched.h and add a priority per processor variable
\end_layout

\begin_layout Enumerate
Modify migrate_thread to set the new priority on that processor
\end_layout

\begin_layout Standard
What is the estimated time ?
\end_layout

\begin_layout Standard
Is there an overhead associated to a priority per processor ?
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
This section will briefly describe the reasons for undertaking this project.
 It will introduce the technical requirements involved, as well as present
 the development workflow and finally the ethics used to complete it.
\end_layout

\begin_layout Subsection
Motivation
\end_layout

\begin_layout Standard
There are many reasons for deciding to take this project.
 First, real-time systems are a critical field with strong requirements
 and very precise skills.
 Life-critical systems integrate real-time techniques to meet their own
 requirements of safety and security.
 Secondly, the generalization of embedded multiprocessors systems have broaden
 the application field of real-time programming.
 Third, real-time in Linux is relatively not developed compared to its popularit
y and reliability.
\end_layout

\begin_layout Subsection
Requirements
\end_layout

\begin_layout Subsection
Deliverables
\end_layout

\begin_layout Subsection
Ethics in the project
\end_layout

\begin_layout Subsection
Report structure
\end_layout

\begin_layout Section
Overview of Real-time in Linux
\end_layout

\begin_layout Subsection
RT-patch
\end_layout

\begin_layout Section
Characteristics of SMP machines
\end_layout

\begin_layout Subsection
Processor affinity
\end_layout

\begin_layout Subsection
SMP Issues
\end_layout

\begin_layout Section
Real time resource sharing protocols
\end_layout

\begin_layout Subsection
Resource sharing protocols on single processor systems
\end_layout

\begin_layout Subsection
Resource sharing protocols on multiprocessor systems
\end_layout

\begin_layout Subsection
Partitioned Fixed Priority VS Earliest Deadline First
\end_layout

\begin_layout Section
Multiprocessor Resource Sharing Protocol
\end_layout

\begin_layout Subsection
The problem of nested locks deadlocks
\end_layout

\begin_layout Subsection
Schedulability Analysis
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Section
Implementation in Linux Kernel
\end_layout

\begin_layout Subsection
The Linux real-time scheduling algorithm
\end_layout

\begin_layout Subsection
Implementation of MRSP
\end_layout

\begin_layout Subsection
Limitations
\end_layout

\begin_layout Section
Results and evaluation
\end_layout

\begin_layout Subsection
QEMU
\end_layout

\begin_layout Subsection
Kernelshark and trace-cmd
\end_layout

\begin_layout Section
Conclusion
\end_layout

\end_body
\end_document
